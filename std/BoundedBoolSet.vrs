import ceil from std/math.vrs

class BoundedBoolSet<UMaxSizeT?UInt:U32 UAtomT?UInt:U8> UMaxSizeT size|
	alias sizeof(UAtomT) * 8 as numBits
	data Array<UAtomT UMaxSizeT>(ceil(size / F32(numBits)))
	add UMaxSizeT index =>
		data[index / numBits] |: 1 << (index % numBits)
	remove UMaxSizeT index =>
		data[index / numBits] &: ~(1 << (index % numBits))
	has UMaxSizeT index => Bool
		return data[index / numBits] >> (index % numBits) & 1 = 1
	findEmpty => UMaxSizeT
		for n UMaxSizeT: 0, n < size - 1, ++n
			if data[n] != ~UAtomT(0)
				break
		atom UAtomT: data[n]
		i UAtomT: 0
		while i < numBits
			if (atom >> i & 1) = 0
				break
		return n * numBits + i
