class Node<T> T payload| //
	Node* next: null
	Node* prev: null
class DoublyLinkedList // hello
	U32 length: 0
	Node* last: null // test
	unshift Node* node => U32 // test
		if last == null
			last = node
		node.next = first
		if first != null
			first.prev = node
		first = node
		return ++length
	push Node* node => U32
		if first == null
			first = node
		node.prev = last
		if last != null
			last.next = node
		last = node
		return ++length
	shift => Node*
		Node* node = first
		first = node.next
		if first != null
			first.prev = null
		--length
		return node
	pop => Node*
		Node* node = last
		last = node.prev
		if last != null
			last.next = null
		--length
		return node
	get U32 index => Node*
		Node* node = null
		if index < length / 2
			node = first
			U32 n = 0;
			while n < index
				node = node.next
				++n
		else
			node = last
			U32 n = length - 1
			while n > index
				node = node.prev
				--n
		return node
	insert Node* node U32 index
		//TODO
	remove Node* node => Node*
		if node == first
			return shift()
		elif node == last
			return pop()
		node.prev.next = node.next
		node.next.prev = node.prev
		--length
		node
