scopeName: "source.verse"
name: "Verse"
fileTypes: ["vrs", "verse"]

repository:
	# variable: {
	# 	match: "[a-z][a-zA-Z0-9]*"
	# }
	typeTemplated: {
		begin: "\\b([A-Z][a-zA-Z0-9]*)(<)"
		beginCaptures:
			1:
				name: "storage.type.verse"
			2:
				name: "keyword.operator.verse"
		end: "(>)"
		endCaptures:
			1:
				name: "keyword.operator.verse"
		patterns: [
			{
				include: "#type"
			}
		]
		name: "meta.typeTemplated.verse"
	}
	typeNotTemplated: {
		match: "\\b([A-Z][a-zA-Z0-9]*)\\b(?!<)"
		captures:
			1:
				name: "storage.type.verse"
		name: "meta.typeNotTemplated.verse"
	}
	type: {
		begin: "\\b(?=[A-Z])"
		end: "(\\**)"
		endCaptures:
			1:
				name: "keyword.operator.verse"
		patterns: [
			{
				include: "#typeTemplated"
			}
			{
				include: "#typeNotTemplated"
			}
		]
		name: "meta.type.verse"
	}
	typeAndIdentifier: {
		begin: "\\b(?=[A-Z])"
		end: " ([a-z][a-zA-Z0-9]*)\\b"
		endCaptures:
			1:
				name: "variable.language.verse"
		patterns: [
			{
				include: "#type"
			}
		]
		name: "meta.typeAndIdentifier.verse"
	}
	comment: {
		begin: "//"
		end: "(?=\n)"
		name: "comment.line.verse"
	}
	operator: {
		match: "[~!@#$%^&*\\-+=/<>\\[\\]:\\.\\,;|?]+"
		name: "keyword.operator.verse"
	}
	functionCall: {
		match: "([a-z][a-zA-Z0-9]*)\\("
		captures:
			1:
				name: "entity.name.function.call.verse"
	}
	namedConstant: {
		match: "\\b(true|false|null)\\b"
		captures:
			1:
				name: "constant.language.verse"
		name: "meta.namedConstant.verse"
	}
	keyword: {
		match: "\\b(?:new|delete|return|import|alias|static)\\b"
		name: "keyword.control.verse"
	}
	numericLiteral: {
		match: "\\b(\\d+(?:\\.\\d+)?)\\b"
		captures:
			1:
				name: "constant.numeric.verse"
	}
	expression: {
		begin: "(?=[\\w\\W])"
		end: "(?=\\n|//)"
		patterns: [
			{
				include: "#operator"
			}
			{
				include: "#numericLiteral"
			}
			{
				include: "#functionCall"
			}
			{
				include: "#keyword"
			}
		]
		name: "meta.expression.verse"
	}
patterns: [
	{ # single line comment
		include: "#comment"
	}
	{ # character literal
		match: "'(?:(\\\\.)|.)'"
		captures:
			0:
				name: "string.quoted.single.verse"
			1:
				name: "constant.character.escape.verse"
	}
	{ # import command
		match: "(import) (\"(?:[^\\n\"\\\\]|\\\\.)*\")\\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "string.quoted.double.verse"
	}
	{ # import from command
		match: "(import) ([A-Za-z]\\w*) (from) (\"(?:[^\n\"\\\\]|\\\\.)*\")\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "string.quoted.double.verse"
	}
	{ # import as command
		match: "(import) ([A-Za-z]\\w*) (as) ([A-Za-z]\\w*) (from) (\"(?:[^\n\"\\\\]|\\\\.)*\")\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "variable.language.verse"
			5:
				name: "keyword.control.verse"
			6:
				name: "string.quoted.double.verse"
	}
	{ # error command
		match: "\\b(error)([^\\n]*)\\n"
		captures:
				1:
					name: "keyword.control.verse"
				2:
					name: "string.quoted.verse"
	}
	{ # alias command
		match: "(alias) ([A-Za-z]\\w*) (as) ([A-Za-z]\\w*)\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "variable.language.verse"
	}
	{ # struct declaration
		match: "(struct) ([A-Z][a-zA-Z0-9]*)"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.type.verse"
	}
	{ # class declaration
		begin: "(class) ([A-Z][a-zA-Z0-9]*)"
		beginCaptures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.type.verse"
		end: "(?=\n|//)"
		patterns: [
			{
				match: "\\||<|>|\\?|:"
				captures:
					0:
						name: "keyword.operator.verse"
			}
			{
				include: "#typeAndIdentifier"
			}
			{
				include: "#type"
			}
		]
		name: "meta.classDec.verse"
	}
	{ # operator overload
		match: "(\\w+(?:\\*|\\[(\\d*)\\])* )?(op) ([~!@#$%^&*\\-+=/<>\\[\\]:;|?]+)(?: ([a-zA-Z]\\w*) ([a-zA-Z]\\w*))?"
		captures:
			1:
				name: "storage.type.verse"
			2:
				name: "constant.numeric.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "entity.name.function"
			5:
				name: "storage.type.verse"
			6:
				name: "variable.parameter.verse"
	}
	{ # keyword line
		begin: "\\b(if|elif|else|while|for|return|break|continue|static)\\b"
		beginCaptures:
			1:
				name: "keyword.control.verse"
		end: "(?=\n)"
		patterns: [
			{
				include: "#expression"
			}
		]
	}
	{ # keyword
		include: "#keyword"
	}
	{ # variable declaration
		begin: "(?=[A-Z])"
		end: "(:)"
		endCaptures:
			1:
				name: "keyword.operator.structure.verse"
		patterns: [
			{
				include: "#typeAndIdentifer"
			}
		]
	}
	{ # function declaration (=>(?![~!@#$%^&*\\-+=/<>\\[\\]:\\.,;|?]))
		begin: "(?:(\\bfunc) )?(\\b[a-z][a-zA-Z0-9]*)(?= ?(?:[A-Z]|=>|\\n|//))"
		beginCaptures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.function"
		end: "(=>)|(?=\\n|//)"
		endCaptures:
			1:
				name: "keyword.control.verse"
		patterns: [
			{
				include: "#typeAndIdentifier"
			}
		]
	}
	{ # expression
		include: "#expression"
	}
]
