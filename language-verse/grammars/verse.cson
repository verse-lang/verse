scopeName: "source.verse"
name: "Verse"
fileTypes: ["vrs", "verse"]

repository:
	comment: {
		begin: "//"
		end: "(?=\n)"
		name: "comment.line.verse"
	}
	identifier: {
		match: "[a-z][a-zA-Z0-9]*"
		# name: "variable.other.verse"
	}
	argument: {
		match: "[a-z][a-zA-Z0-9]*"
		name: "variable.language.verse" # "variable.parameter.verse"
	}
	typeName: {
		match: "\\b([A-Z][a-zA-Z0-9]*)\\b"
		captures:
			1:
				name: "storage.type.verse"
		# name: "meta.typeNotTemplated.verse"
	}
	operator: {
		match: "[~!@#$%^&*\\-+=/<>\\[\\]:\\.\\,;|?]+"
		name: "keyword.operator.verse"
	}
	functionCall: {
		match: "([a-z][a-zA-Z0-9]*)\\("
		captures:
			1:
				name: "entity.name.function.call.verse"
	}
	namedConstant: {
		match: "\\b(true|false|null)\\b"
		captures:
			1:
				name: "constant.language.verse"
		name: "meta.namedConstant.verse"
	}
	keyword: {
		match: "\\b(?:new|delete|return|import|alias|if|elif|else|while|for|return|break|continue|static|class|struct|as|from)\\b"
		name: "keyword.control.verse"
	}
	numericLiteral: {
		match: "\\b(\\d+(?:\\.\\d+)?)\\b"
		captures:
			1:
				name: "constant.numeric.verse"
	}
	characterLiteral: {
		match: "'(\\\\[\w\W]|[^\\\\'])'"
		captures:
			0:
				name: "string.quoted.single.verse"
			1:
				name: "constant.character.escape.verse"
	}
	errorCommand: {
		match: "\\b(error)([^\\n]*)\\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "string.quoted.verse"
	}
	funcDef: {
		match: "([a-z][a-zA-Z0-9]*)\\s*((?=[A-Z]|=>|\\n|//)[^=]*)\\s*(=>)\\s*(?:(.+))?"
		captures:
			1:
				name: "entity.name.function"
			2:
				patterns: [
					{
						include: "#typeName"
					}
					{
						include: "#argument"
					}
					{
						include: "#operator"
					}
				]
			3:
				name: "keyword.control.verse"
			4:
				patterns: [
					{
						include: "#typeName"
					}
					{
						include: "#operator"
					}
				]
		name: "meta.funcDef.verse"
	}
	# varDef: {
	# 	match: "([A-Z][a-zA-Z0-9]*)((?:[A-Z][a-zA-Z0-9]*|[<>*]|\\s)*) ([a-z][a-zA-Z0-9]*)(:)"
	# 	captures:
	# 		1:
	# 			name: "storage.type.verse"
	# 		2:
	# 			patterns: [
	# 				{
	# 					include: "#typeName"
	# 				}
	# 				{
	# 					include: "#operator"
	# 				}
	# 			]
	# 		3:
	# 			name: "variable.other.def.verse"
	# 		4:
	# 			name: "keyword.control.verse"
	# 	name: "meta.varDef.verse"
	# }
	varDef: {
		match: "([a-z][a-zA-Z0-9]*) ([A-Z][a-zA-Z0-9]*)((?:[A-Z][a-zA-Z0-9]*|[<>*]|\\s)*)(?:(:)|\\()"
		captures:
			1:
				name: "variable.other.def.verse"
			2:
				name: "storage.type.verse"
			3:
				patterns: [
					{
						include: "#typeName"
					}
					{
						include: "#operator"
					}
				]
			4:
				name: "keyword.control.verse"
		name: "meta.varDef.verse"
	}
	classDef: {
		match: "(class) ([A-Z][a-zA-Z0-9]*)(.*)"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.type.verse"
			3:
				patterns: [
					{
						include: "#typeName"
					}
					{
						include: "#operator"
					}
					{
						include: "#argument"
					}
				]
		name: "meta.varDef.verse"
	}
patterns: [
	{
		include: "#comment"
	}
	{
		include: "#classDef"
	}
	{
		include: "#keyword"
	}
	{
		include: "#namedConstant"
	}
	{
		include: "#funcDef"
	}
	{
		include: "#functionCall"
	}
	{
		include: "#varDef"
	}
	{
		include: "#identifier"
	}
	{
		include: "#typeName"
	}
	{
		include: "#operator"
	}
	{
		include: "#numericLiteral"
	}
	{
		include: "#characterLiteral"
	}
	{
		include: "#errorCommand"
	}
]
