scopeName: "source.verse"
name: "Verse"
fileTypes: ["vrs", "verse"]

repository:
	variable: {
		match: "[a-z][a-zA-Z0-9]*"
	}
	type: {
		match: "[A-Z][a-zA-Z0-9]*"
		captures:
			0:
				name: "storage.type.verse"
	}
	typeAndIdentifier: {
		match: "([A-Z][a-zA-Z0-9]*) ([a-z][a-zA-Z0-9]*)"
		captures:
			1:
				name: "storage.type.verse"
			2:
				name: "variable.parameter.verse"
	}
patterns: [
	{ # single line comment
		begin: "//"
		end: "\n"
		name: "comment.line.verse"
	}
	{ # character literal
		match: "'(?:(\\\\.)|.)'"
		captures:
			0:
				name: "string.quoted.single.verse"
			1:
				name: "constant.character.escape.verse"
	}
	{ # import command
		match: "(import) (\"(?:[^\n\"\\\\]|\\\\.)*\")\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "string.quoted.double.verse"
	}
	{ # import from command
		match: "(import) ([A-Za-z]\\w*) (from) (\"(?:[^\n\"\\\\]|\\\\.)*\")\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "string.quoted.double.verse"
	}
	{ # import as command
		match: "(import) ([A-Za-z]\\w*) (as) ([A-Za-z]\\w*) (from) (\"(?:[^\n\"\\\\]|\\\\.)*\")\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "variable.language.verse"
			5:
				name: "keyword.control.verse"
			6:
				name: "string.quoted.double.verse"
	}
	{ # alias command
		match: "(alias) ([A-Za-z]\\w*) (as) ([A-Za-z]\\w*)\n"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "variable.language.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "variable.language.verse"
	}
	{ # struct declaration
		match: "(struct) ([A-Z][a-zA-Z0-9]*)"
		captures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.type.verse"
	}
	{ # class declaration
		begin: "(class) ([A-Z][a-zA-Z0-9]*)(<?)"
		beginCaptures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.type.verse"
			3:
				name: "keyword.operator.verse"
		end: "\n"
		patterns: [
			{
				include: "#type"
			}
			{
				match: "\\||<|>"
				captures:
					0:
						name: "keyword.operator.verse"
			}
		]
		name: "meta.classDec.verse"
	}
	{ # operator overload
		match: "(\\w+(?:\\*|\\[(\\d*)\\])* )?(op) ([~!@#$%^&*\\-+=/<>\\[\\]:;|?]+)(?: ([a-zA-Z]\\w*) ([a-zA-Z]\\w*))?"
		captures:
			1:
				name: "storage.type.verse"
			2:
				name: "constant.numeric.verse"
			3:
				name: "keyword.control.verse"
			4:
				name: "entity.name.function"
			5:
				name: "storage.type.verse"
			6:
				name: "variable.parameter.verse"
	}
	{ # function declaration
		match: "([a-z][a-zA-Z0-9]*) (=>(?![~!@#$%^&*\\-+=/<>\\[\\]:\\.,;|?]))"
		captures:
			1:
				name: "entity.name.function"
			2:
				name: "keyword.control.verse"
	}
	{ # func declaration
		begin: "(func) ([a-z][a-zA-Z0-9]*)"
		beginCaptures:
			1:
				name: "keyword.control.verse"
			2:
				name: "entity.name.function"
		end: "=>|\n"
		endCaptures:
			0:
				name: "keyword.control.verse"
		patterns: [
			{
				include: "#typeAndIdentifier"
			}
		]
	}
	{ # keyword
		match: "\\b(?:if|elif|else|while|for|new|delete|return|import|break|continue)\\b"
		name: "keyword.control.verse"
	}
	{ # function declaration (2) with return type
		begin: "([a-z][a-zA-Z0-9]*) (?=[A-Z]|->)" # (?!import\\b)
		beginCaptures:
			1:
				name: "entity.name.function"
		end: "=>|\n"
		endCaptures:
			0:
				name: "keyword.control.verse"
		patterns: [
			{
				include: "#typeAndIdentifier"
			}
		]
	}
	{ # function declaration (2) without args and without return type
		match: "(?<!\t)(\t*)((?<![a-zA-Z0-9])[a-z][a-zA-Z0-9]*)\n(\\0\t)(?!\t)"
		captures:
			2:
				name: "entity.name.function"
	}
	{ # function call
		match: "([a-z][a-zA-Z0-9]*)\\("
		captures:
			1:
				name: "entity.name.function.call.verse"
	}
	{ # type
		include: "#type"
	}
	{ # variable
		include: "#variable"
	}
	{ # constants
		match: "\\b(?:true|false|null)\\b"
		name: "constant.language.verse"
	}
	{ # numeric literal
		match: "\\b\\d+(?:\\.\\d+)?\\b"
		name: "constant.numeric.verse"
	}
	{ # variable declaration
		begin: "#?(?=[A-Z])"
		beginCaptures:
			0:
				name: "keyword.operator.structure.verse"
		end: " [a-z][a-zA-Z0-9]*"
		endCaptures:
			0:
				name: "variable.other.declaration.verse"
		patterns: [
			{
				include: "#type"
			}
		]
	}
	{ # operator
		match: "[~!@#$%^&*\\-+=/<>\\[\\]:\\.\\,;|?]+"
		name: "keyword.operator.verse"
	}
]
